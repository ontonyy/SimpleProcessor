version: '3.3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=123456
    volumes:
      - data:/data
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://root:123456@localhost:27017/ --quiet

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=123456
      - ME_CONFIG_MONGODB_SERVER=mongodb

  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: redis-cli ping | grep -q '^PONG' || exit 1

  collector:
    image: otel/opentelemetry-collector:latest
    volumes:
      - ./otel-config.yml:/etc/otel-collector-config.yml
    command: [ "--config=/etc/otel-collector-config.yml" ]
    ports:
      - "4317:4317"
    depends_on:
      - jaeger-service

  jaeger-service:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14250"

  simple-processor:
    container_name: simple-processor
    build:
      dockerfile: Dockerfile
    image: simple-processor:latest
    ports:
      - "8080:8080"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  data: {}