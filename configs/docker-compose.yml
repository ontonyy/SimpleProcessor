version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENTINC_VERSION}
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENTINC_VERSION}
    container_name: kafka
    hostname: kafka
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL_SAME_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: nc -z localhost 9092 || exit -1

  mongodb:
    image: mongo:${MONGO_VERSION}
    container_name: mongodb
    ports:
      - '27017:27017'
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=123456
    volumes:
      - data:/data
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://root:123456@localhost:27017/ --quiet || exit 1

  mongo-express:
    image: mongo-express:${MONGO_EXPRESS_VERSION}
    container_name: mongo-express
    ports:
      - '8081:8081'
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=123456
      - ME_CONFIG_MONGODB_SERVER=mongodb

  redis-stack:
    image: redis:${REDIS_VERSION}
    container_name: redis-stack
    hostname: redis-stack
    ports:
      - '6379:6379'
    healthcheck:
      test: redis-cli ping | grep -q '^PONG' || exit 1

  jaeger:
    image: jaegertracing/all-in-one:${JAEGERTRACING_VERSION}
    ports:
      - "16686:16686"
      - "14250:14250"

  simple-processor:
    container_name: simple-processor
    image: simple-processor:latest
    build:
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      redis-stack:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      MONGO_HOST: mongodb
      KAFKA_HOST: kafka
      REDIS_HOST: redis-stack
      LOGGING_PREFIX: Dockerized
      OTEL_SERVICE_NAME: simple-processor
      OTEL_METRICS_EXPORTER: none
      OTEL_TRACES_EXPORTER: jaeger
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14250


volumes:
  data: {}